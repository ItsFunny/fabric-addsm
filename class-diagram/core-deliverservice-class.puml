@startuml
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider {
 class blocksProviderImpl {
  chainID string
  client streamClient
  gossip GossipServiceAdapter
  mcs api.MessageCryptoService
  done int32
  wrongStatusThreshold int
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice {
 class broadcastClient {
  stopFlag int32
  sync.Mutex
  stopChan chan struct { }
  createClient clientFactory
  shouldRetry retryPolicy
  onConnect broadcastSetup
  prod comm.ConnectionProducer
  blocksprovider.BlocksDeliverer
  conn *connection
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice {
 class connection {
  sync.Once
  *grpc.ClientConn
  cancel context.CancelFunc
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice {
 class deliverServiceImpl {
  conf *Config
  blockProviders map[string]blocksprovider.BlocksProvider
  lock sync.RWMutex
  stopping bool
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice {
 class Config {
  ConnFactory func(channelID string)func(endpoint string)(*grpc.ClientConn,error)
  ABCFactory func(*grpc.ClientConn)orderer.AtomicBroadcastClient
  CryptoSvc api.MessageCryptoService
  Gossip blocksprovider.GossipServiceAdapter
  Endpoints []string
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks {
 class MockGossipServiceAdapter {
  AddPayloadsCnt int32
  GossipBlockDisseminations chan uint64
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks {
 class MockAtomicBroadcastClient {
  BD *MockBlocksDeliverer
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks {
 class MockBlocksDeliverer {
  DisconnectCalled chan struct { }
  CloseCalled chan struct { }
  Pos uint64
  grpc.ClientStream
  RecvCnt int32
  MockRecv func(mock *MockBlocksDeliverer)(*orderer.DeliverResponse,error)
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks {
 class MockLedgerInfo {
  Height uint64
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks {
 class Orderer {
  net.Listener
  *grpc.Server
  nextExpectedSeek uint64
  t *testing.T
  blockChannel chan uint64
  stopChan chan struct { }
  failFlag int32
  connCount uint32
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice {
 class blocksRequester {
  chainID string
  client blocksprovider.BlocksDeliverer
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider {
 interface LedgerInfo  {
  LedgerHeight()(uint64,error)
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider {
 interface GossipServiceAdapter  {
  PeersOfChannel(gossipcommon.ChainID)[]discovery.NetworkMember
  AddPayload(chainID string,payload *gossip_proto.Payload)error
  Gossip(msg *gossip_proto.GossipMessage)
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider {
 interface BlocksProvider  {
  DeliverBlocks()
  Stop()
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider {
 interface BlocksDeliverer  {
  Recv()(*orderer.DeliverResponse,error)
  Send(*common.Envelope)error
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider {
 interface streamClient  {
  Close()
  Disconnect()
}
}
namespace github.com\\hyperledger\\fabric\\core\\deliverservice {
 interface DeliverService  {
  StartDeliverForChannel(chainID string,ledgerInfo blocksprovider.LedgerInfo)error
  StopDeliverForChannel(chainID string)error
  Stop()
}
}
github.com\\hyperledger\\fabric\\core\\deliverservice.broadcastClient ---> github.com\\hyperledger\\fabric\\core\\deliverservice.connection : conn
github.com\\hyperledger\\fabric\\core\\deliverservice.deliverServiceImpl ---> github.com\\hyperledger\\fabric\\core\\deliverservice.Config : conf
github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks.MockAtomicBroadcastClient ---> github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks.MockBlocksDeliverer : BD
github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider.LedgerInfo <|- github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks.MockLedgerInfo
github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider.GossipServiceAdapter <|- github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks.MockGossipServiceAdapter
github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider.BlocksProvider <|- github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider.blocksProviderImpl
github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider.BlocksDeliverer <|- github.com\\hyperledger\\fabric\\core\\deliverservice.broadcastClient
github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider.BlocksDeliverer <|- github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks.MockBlocksDeliverer
github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider.streamClient <|- github.com\\hyperledger\\fabric\\core\\deliverservice.broadcastClient
github.com\\hyperledger\\fabric\\core\\deliverservice\\blocksprovider.streamClient <|- github.com\\hyperledger\\fabric\\core\\deliverservice\\mocks.MockBlocksDeliverer
github.com\\hyperledger\\fabric\\core\\deliverservice.DeliverService <|- github.com\\hyperledger\\fabric\\core\\deliverservice.deliverServiceImpl
@enduml